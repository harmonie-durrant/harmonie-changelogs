{"mappings":"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","sources":["src/index.js","src/changelog-card.js","node_modules/marked/lib/marked.umd.js","node_modules/marked/src/marked.ts","node_modules/marked/src/defaults.ts","node_modules/marked/src/rules.ts","node_modules/marked/src/helpers.ts","node_modules/marked/src/Tokenizer.ts","node_modules/marked/src/Lexer.ts","node_modules/marked/src/Renderer.ts","node_modules/marked/src/TextRenderer.ts","node_modules/marked/src/Parser.ts","node_modules/marked/src/Hooks.ts","node_modules/marked/src/Instance.ts"],"sourcesContent":["import { ChangeLogCard } from './changelog-card.js';\nimport { ChangelogCardEditor } from './changelog-card.js';\n\ncustomElements.define('changelog-card', ChangeLogCard);\n\ncustomElements.define('changelog-card-editor', ChangelogCardEditor);\n\nwindow.customCards = window.customCards || [];\nwindow.customCards.push({\n\ttype: 'changelog-card',\n\tname: 'Changelog Card',\n\tdescription: 'A card that displays changelog information from an input_text entity'\n});\n","import { marked } from 'marked';\n\nexport class ChangeLogCard extends HTMLElement {\n    static getStubConfig() {\n        return { type: 'custom:changelog-card' };\n    }\n\n    static async getConfigElement() {\n        return document.createElement('changelog-card-editor');\n    }\n\n    static get properties() {\n        return {\n            hass: {},\n            _config: {},\n            _dialog: {}\n        };\n    }\n\n    constructor() {\n        super();\n        this._config = {};\n        this._dialog = null;\n        this._hass = null;\n        this._lastViewedKey = 'changelog_last_viewed';\n        this._hasAutoOpened = false;\n        this._defaultButtonText = 'Show Changelog';\n        this._md = marked.parse;\n        if (!this._md) {\n            console.warn('Markdown parser not available');\n        } else {\n            try {\n                const test = this._md('# Test');\n                console.log('Markdown parser test:', test);\n            } catch (e) {\n                console.error('Markdown parser test failed:', e);\n            }\n        }\n    }\n\n    setConfig(config) {\n        if (!config || !config.entity) {\n            throw new Error('Please define an input_text entity');\n        }\n        if (this._hass && (!this._hass.states[config.entity] ||\n            !this._hass.states[config.entity].entity_id.startsWith('input_text.'))) {\n            throw new Error('Entity must be an input_text entity');\n        }\n\n        const configChanged = JSON.stringify(this._config) !== JSON.stringify(config);\n        this._config = config;\n\n        if (configChanged) {\n            this._createCard();\n        }\n    }\n\n    _checkShouldAutoOpen() {\n        if (window.location.search.includes('edit=1')) return false;\n\n        if (this._hasAutoOpened || !this._hass || !this._config.entity) return false;\n\n        const state = this._hass.states[this._config.entity];\n        if (!state || !state.last_updated) return false;\n\n        const lastUpdated = new Date(state.last_updated).getTime();\n        const lastViewed = parseInt(localStorage.getItem(this._lastViewedKey) || '0');\n\n        return lastUpdated > lastViewed;\n    }\n\n    _updateLastViewed() {\n        localStorage.setItem(this._lastViewedKey, Date.now().toString());\n    }\n\n    set hass(hass) {\n        this._hass = hass;\n        if (this._config && this._config.entity) {\n            this.render();\n        }\n    }\n\n    async firstUpdated() {\n        await this._createCard();\n    }\n\n    async _createCard() {\n        if (!localStorage.getItem(this._lastViewedKey)) {\n            this._updateLastViewed();\n        }\n\n        const shadow = this.attachShadow({ mode: 'open' });\n        const style = document.createElement('style');\n        style.textContent = `\n            ha-dialog {\n                --mdc-dialog-min-width: 400px;\n                --mdc-dialog-max-width: 600px;\n                --mdc-dialog-heading-ink-color: var(--primary-text-color);\n                --mdc-dialog-content-ink-color: var(--primary-text-color);\n                --justify-action-buttons: flex-end;\n                --ha-dialog-border-radius: var(--ha-card-border-radius, 12px);\n            }\n\n            .heading {\n                border-bottom: 1px solid var(--divider-color);\n                padding: 16px;\n                display: flex;\n                align-items: center;\n                background: var(--ha-card-header-background, var(--card-background-color, var(--primary-background-color)));\n                border-top-left-radius: var(--ha-dialog-border-radius);\n                border-top-right-radius: var(--ha-dialog-border-radius);\n            }\n\n            .title {\n                display: flex;\n                align-items: center;\n                gap: 8px;\n                font-size: 1.2em;\n                font-weight: 500;\n                color: var(--ha-card-header-color, var(--primary-text-color));\n            }\n\n            .title-icon {\n                color: var(--ha-card-header-color, var(--primary-text-color));\n                --mdc-icon-size: 24px;\n            }\n\n            .content {\n                padding: 16px;\n            }\n\n            .changelog-content {\n                color: var(--primary-text-color);\n                line-height: 1.5;\n            }\n\n            .changelog-content h1 {\n                font-size: 1.5em;\n                margin-top: 0.5em;\n                margin-bottom: 0.5em;\n            }\n\n            .changelog-content h2 {\n                font-size: 1.3em;\n                margin-top: 0.5em;\n                margin-bottom: 0.5em;\n            }\n\n            .changelog-content h3 {\n                font-size: 1.1em;\n                margin-top: 0.5em;\n                margin-bottom: 0.5em;\n            }\n\n            .changelog-content ul, .changelog-content ol {\n                margin-top: 0.5em;\n                margin-bottom: 0.5em;\n                padding-left: 1.5em;\n            }\n\n            .changelog-content p {\n                margin-top: 0.5em;\n                margin-bottom: 0.5em;\n            }\n\n            .changelog-content code {\n                background-color: var(--code-background-color, var(--secondary-background-color));\n                padding: 0.2em 0.4em;\n                border-radius: 3px;\n                font-family: var(--code-font-family, monospace);\n            }\n\n            .changelog-content pre {\n                background-color: var(--code-background-color, var(--secondary-background-color));\n                padding: 1em;\n                border-radius: 4px;\n                overflow-x: auto;\n            }\n\n            .changelog-content blockquote {\n                border-left: 4px solid var(--divider-color);\n                margin: 0.5em 0;\n                padding-left: 1em;\n                color: var(--secondary-text-color);\n            }\n\n            .footer {\n                padding: 8px;\n                border-top: 1px solid var(--divider-color);\n                display: flex;\n                justify-content: flex-end;\n            }\n        `;\n        const content = document.createElement('div');\n        content.innerHTML = `\n            <ha-dialog>\n                <div class=\"heading\">\n                    <ha-icon icon=\"mdi:text-box-plus-outline\" class=\"title-icon\"></ha-icon>\n                    <div class=\"title\">Changelog</div>\n                </div>\n\n                <div class=\"content\">\n                    <div class=\"changelog-content\"></div>\n                </div>\n\n                <div slot=\"primaryAction\" class=\"footer\">\n                    <ha-button dialogAction=\"close\">Dismiss</ha-button>\n                </div>\n            </ha-dialog>\n        `;\n\n        shadow.appendChild(style);\n        shadow.appendChild(content);\n\n        this._dialog = shadow.querySelector('ha-dialog');\n        const button = document.createElement('ha-button');\n        button.className = 'dash-button';\n        button.innerText = this._config.button_text || this._defaultButtonText;\n        button.addEventListener('click', () => this._openDialog());\n        button.style.display = this._config.hide_button ? 'none' : '';\n\n        shadow.appendChild(button);\n    }\n\n    render() {\n        if (!this._hass || !this._config || !this._config.entity) {\n            console.warn('Incomplete initialization');\n            return;\n        }\n\n        const entityId = this._config.entity;\n        const state = this._hass.states[entityId];\n\n        if (!state) {\n            console.error(`Entity ${entityId} not found`);\n            const alert = this.shadowRoot?.querySelector('ha-alert');\n            if (alert) {\n                alert.innerText = `Entity ${entityId} not found`;\n                alert.style.display = 'block';\n            }\n            return;\n        }\n\n        const alert = this.shadowRoot?.querySelector('ha-alert');\n        if (alert) {\n            alert.style.display = 'none';\n        }\n\n        const changelogContent = this.shadowRoot?.querySelector('.changelog-content');\n        if (changelogContent) {\n            if (typeof this._md === 'function' && state.state) {\n                try {\n                    // Replace literal \\n with actual newlines and parse markdown\n                    const processedText = state.state.replace(/\\\\n/g, '\\n');\n                    const htmlContent = this._md(processedText, {\n                        breaks: true,\n                        gfm: true\n                    });\n                    changelogContent.innerHTML = htmlContent;\n                } catch (error) {\n                    console.error('Failed to parse markdown:', error);\n                    console.log('Content attempted to parse:', state.state);\n                    changelogContent.innerHTML = state.state.replace(/\\n/g, '<br>');\n                }\n            } else {\n                changelogContent.innerHTML = state.state ? state.state.replace(/\\n/g, '<br>') : '';\n            }\n        }\n\n        const button = this.shadowRoot?.querySelector('.dash-button');\n        if (button) {\n            button.disabled = !state.state;\n            button.innerText = this._config.button_text || this._defaultButtonText;\n            button.style.display = this._config.hide_button ? 'none' : '';\n        }\n        if (!this._hasAutoOpened && this._checkShouldAutoOpen()) {\n            this._hasAutoOpened = true;\n            this._openDialog();\n        }\n    }\n\n    _openDialog() {\n        if (!this._dialog) {\n            this._dialog = this.shadowRoot.querySelector('ha-dialog');\n        }\n        if (this._dialog) {\n            this._dialog.open = true;\n            this._updateLastViewed();\n        }\n    }\n}\n\n\nexport class ChangelogCardEditor extends HTMLElement {\n    constructor() {\n        super();\n        this._config = {};\n        this._hass = null;\n        this._overridableElements = {};\n        this._rendered = false;\n        this._currentLanguage = 'en';\n        this._card_fields = [\n            {\n                name: 'entity',\n                label: 'Changelog Text Entity',\n                type: 'entity',\n                required: true,\n                description: 'Select an input_text entity that contains your changelog content.',\n                selector: { entity: { domain: 'input_text' } }\n            },\n            {\n                name: 'button_text',\n                label: 'Button Text',\n                type: 'text',\n                required: false,\n                description: 'Custom text for the changelog button. Leave empty to use the default text.',\n            },\n            {\n                name: 'hide_button',\n                label: 'Hide Button',\n                type: 'boolean',\n                required: false,\n                description: 'Hide the changelog button on the dashboard, the changelog will still show up when there are new entries.',\n            },\n        ];\n    }\n\n    set hass(hass) {\n        if (!hass) {\n            return;\n        }\n        this._currentLanguage = 'en';\n        if (!this._hass || this._hass.entities !== hass.entities) {\n            this._hass = hass;\n            if (this._rendered) {\n                this.render();\n            }\n        }\n    }\n\n    get hass() {\n        return this._hass;\n    }\n\n    setConfig(config) {\n        if (!this._hass) {\n            return;\n        }\n        this._config = config;\n        this.loadEntityPicker();\n        if (!this._rendered) {\n            this._rendered = true;\n            this.render();\n        }\n    }\n\n    _reorderConfig(config) {\n        const { grid_options, ...rest } = config;\n        return grid_options ? { ...rest, grid_options } : { ...rest };\n    }\n\n    _updateConfigProperty(key, value) {\n        const newConfig = { ...this._config };\n        if (value === '') {\n            delete newConfig[key];\n        } else {\n            newConfig[key] = value;\n        }\n        this._config = this._reorderConfig(newConfig);\n\n        this.dispatchEvent(new CustomEvent('config-changed', {\n            detail: { config: { ...this._config } },\n            bubbles: true,\n            composed: true\n        }));\n    }\n\n    _createField({ name, label, type, required = false, description }) {\n        let inputElement;\n        const value = this._config[name] || '';\n\n        switch (type) {\n            case 'entity':\n                inputElement = document.createElement('ha-entity-picker');\n                inputElement.hass = this._hass;\n                break;\n            case 'boolean':\n                inputElement = document.createElement('ha-switch');\n                inputElement.checked = value === true;\n                break;\n            default:\n                inputElement = document.createElement('ha-textfield');\n                inputElement.type = 'text';\n        }\n\n        inputElement.style.display = 'flex';\n        inputElement.required = required;\n        inputElement.label = label;\n        inputElement.value = value;\n\n        if (type === 'boolean') {\n            inputElement.addEventListener('change', (event) => {\n                this._updateConfigProperty(name, event.target.checked);\n            });\n        } else {\n            inputElement.addEventListener('value-changed', (event) => {\n                const newValue = event.detail?.value || event.target.value;\n                this._updateConfigProperty(name, newValue);\n            });\n        }\n\n        const fieldContainer = document.createElement('div');\n        fieldContainer.style.marginBottom = '12px';\n        const fieldDescription = document.createElement('span');\n        fieldDescription.style.width = '90%';\n        fieldDescription.innerText = description;\n        fieldDescription.style.fontSize = '12px';\n        fieldDescription.style.color = '#888';\n\n        fieldContainer.appendChild(inputElement);\n        fieldContainer.appendChild(fieldDescription);\n\n        return fieldContainer;\n    }\n\n    async loadEntityPicker() {\n        if (!window.customElements.get(\"ha-entity-picker\")) {\n            const ch = await window.loadCardHelpers();\n            const c = await ch.createCardElement({ type: \"entities\", entities: [] });\n            await c.constructor.getConfigElement();\n            const haEntityPicker = window.customElements.get(\"ha-entity-picker\");\n        }\n    }\n\n    render() {\n        this.innerHTML = '';\n        const fragment = document.createDocumentFragment();\n\n        const container = document.createElement('div');\n        container.style.display = 'flex';\n        container.style.flexDirection = 'column';\n        container.style.flexWrap = 'wrap';\n        container.style.overflow = 'auto';\n        container.style.overflowX = 'hidden';\n        container.style.maxHeight = '100vh';\n\n        this._card_fields.forEach((field) => {\n            container.appendChild(this._createField({\n                name: field.name,\n                label: field.label,\n                type: field.type,\n                required: field.required,\n                description: field.description\n            }));\n        });\n\n        fragment.appendChild(container);\n        this.appendChild(fragment);\n    }\n}","/**\n * marked v16.3.0 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n(function(g,f){if(typeof exports==\"object\"&&typeof module<\"u\"){module.exports=f()}else if(\"function\"==typeof define && define.amd){define(\"marked\",f)}else {g[\"marked\"]=f()}}(typeof globalThis < \"u\" ? globalThis : typeof self < \"u\" ? self : this,function(){var exports={};var __exports=exports;var module={exports};\n\"use strict\";var G=Object.defineProperty;var be=Object.getOwnPropertyDescriptor;var Re=Object.getOwnPropertyNames;var Oe=Object.prototype.hasOwnProperty;var Te=(a,e)=>{for(var t in e)G(a,t,{get:e[t],enumerable:!0})},we=(a,e,t,n)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of Re(e))!Oe.call(a,r)&&r!==t&&G(a,r,{get:()=>e[r],enumerable:!(n=be(e,r))||n.enumerable});return a};var ye=a=>we(G({},\"__esModule\",{value:!0}),a);var dt={};Te(dt,{Hooks:()=>S,Lexer:()=>x,Marked:()=>A,Parser:()=>b,Renderer:()=>P,TextRenderer:()=>$,Tokenizer:()=>y,defaults:()=>O,getDefaults:()=>_,lexer:()=>ht,marked:()=>d,options:()=>it,parse:()=>pt,parseInline:()=>ut,parser:()=>ct,setOptions:()=>ot,use:()=>at,walkTokens:()=>lt});module.exports=ye(dt);function _(){return{async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null}}var O=_();function N(a){O=a}var C={exec:()=>null};function h(a,e=\"\"){let t=typeof a==\"string\"?a:a.source,n={replace:(r,i)=>{let s=typeof i==\"string\"?i:i.source;return s=s.replace(m.caret,\"$1\"),t=t.replace(r,s),n},getRegex:()=>new RegExp(t,e)};return n}var m={codeRemoveIndent:/^(?: {1,4}| {0,3}\\t)/gm,outputLinkReplace:/\\\\([\\[\\]])/g,indentCodeCompensation:/^(\\s+)(?:```)/,beginningSpace:/^\\s+/,endingHash:/#$/,startingSpaceChar:/^ /,endingSpaceChar:/ $/,nonSpaceChar:/[^ ]/,newLineCharGlobal:/\\n/g,tabCharGlobal:/\\t/g,multipleSpaceGlobal:/\\s+/g,blankLine:/^[ \\t]*$/,doubleBlankLine:/\\n[ \\t]*\\n[ \\t]*$/,blockquoteStart:/^ {0,3}>/,blockquoteSetextReplace:/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,blockquoteSetextReplace2:/^ {0,3}>[ \\t]?/gm,listReplaceTabs:/^\\t+/,listReplaceNesting:/^ {1,4}(?=( {4})*[^ ])/g,listIsTask:/^\\[[ xX]\\] /,listReplaceTask:/^\\[[ xX]\\] +/,anyLine:/\\n.*\\n/,hrefBrackets:/^<(.*)>$/,tableDelimiter:/[:|]/,tableAlignChars:/^\\||\\| *$/g,tableRowBlankLine:/\\n[ \\t]*$/,tableAlignRight:/^ *-+: *$/,tableAlignCenter:/^ *:-+: *$/,tableAlignLeft:/^ *:-+ *$/,startATag:/^<a /i,endATag:/^<\\/a>/i,startPreScriptTag:/^<(pre|code|kbd|script)(\\s|>)/i,endPreScriptTag:/^<\\/(pre|code|kbd|script)(\\s|>)/i,startAngleBracket:/^</,endAngleBracket:/>$/,pedanticHrefTitle:/^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,unicodeAlphaNumeric:/[\\p{L}\\p{N}]/u,escapeTest:/[&<>\"']/,escapeReplace:/[&<>\"']/g,escapeTestNoEncode:/[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,escapeReplaceNoEncode:/[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,unescapeTest:/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,caret:/(^|[^\\[])\\^/g,percentDecode:/%25/g,findPipe:/\\|/g,splitPipe:/ \\|/,slashPipe:/\\\\\\|/g,carriageReturn:/\\r\\n|\\r/g,spaceLine:/^ +$/gm,notSpaceStart:/^\\S*/,endingNewline:/\\n$/,listItemRegex:a=>new RegExp(`^( {0,3}${a})((?:[\t ][^\\\\n]*)?(?:\\\\n|$))`),nextBulletRegex:a=>new RegExp(`^ {0,${Math.min(3,a-1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \t][^\\\\n]*)?(?:\\\\n|$))`),hrRegex:a=>new RegExp(`^ {0,${Math.min(3,a-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),fencesBeginRegex:a=>new RegExp(`^ {0,${Math.min(3,a-1)}}(?:\\`\\`\\`|~~~)`),headingBeginRegex:a=>new RegExp(`^ {0,${Math.min(3,a-1)}}#`),htmlBeginRegex:a=>new RegExp(`^ {0,${Math.min(3,a-1)}}<(?:[a-z].*>|!--)`,\"i\")},Pe=/^(?:[ \\t]*(?:\\n|$))+/,Se=/^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/,$e=/^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,I=/^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,_e=/^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,F=/(?:[*+-]|\\d{1,9}[.)])/,ie=/^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,oe=h(ie).replace(/bull/g,F).replace(/blockCode/g,/(?: {4}| {0,3}\\t)/).replace(/fences/g,/ {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g,/ {0,3}>/).replace(/heading/g,/ {0,3}#{1,6}/).replace(/html/g,/ {0,3}<[^\\n>]+>\\n/).replace(/\\|table/g,\"\").getRegex(),Le=h(ie).replace(/bull/g,F).replace(/blockCode/g,/(?: {4}| {0,3}\\t)/).replace(/fences/g,/ {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g,/ {0,3}>/).replace(/heading/g,/ {0,3}#{1,6}/).replace(/html/g,/ {0,3}<[^\\n>]+>\\n/).replace(/table/g,/ {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/).getRegex(),Q=/^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,Me=/^[^\\n]+/,U=/(?!\\s*\\])(?:\\\\[\\s\\S]|[^\\[\\]\\\\])+/,ze=h(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace(\"label\",U).replace(\"title\",/(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex(),Ae=h(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g,F).getRegex(),v=\"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",K=/<!--(?:-?>|[\\s\\S]*?(?:-->|$))/,Ee=h(\"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$))\",\"i\").replace(\"comment\",K).replace(\"tag\",v).replace(\"attribute\",/ +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),ae=h(Q).replace(\"hr\",I).replace(\"heading\",\" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\",\"\").replace(\"|table\",\"\").replace(\"blockquote\",\" {0,3}>\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",v).getRegex(),Ce=h(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace(\"paragraph\",ae).getRegex(),W={blockquote:Ce,code:Se,def:ze,fences:$e,heading:_e,hr:I,html:Ee,lheading:oe,list:Ae,newline:Pe,paragraph:ae,table:C,text:Me},se=h(\"^ *([^\\\\n ].*)\\\\n {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\").replace(\"hr\",I).replace(\"heading\",\" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"blockquote\",\" {0,3}>\").replace(\"code\",\"(?: {4}| {0,3}\t)[^\\\\n]\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",v).getRegex(),Ie={...W,lheading:Le,table:se,paragraph:h(Q).replace(\"hr\",I).replace(\"heading\",\" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\",\"\").replace(\"table\",se).replace(\"blockquote\",\" {0,3}>\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",v).getRegex()},Be={...W,html:h(`^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\\\s[^'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))`).replace(\"comment\",K).replace(/tag/g,\"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,heading:/^(#{1,6})(.*)(?:\\n+|$)/,fences:C,lheading:/^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,paragraph:h(Q).replace(\"hr\",I).replace(\"heading\",` *#{1,6} *[^\n]`).replace(\"lheading\",oe).replace(\"|table\",\"\").replace(\"blockquote\",\" {0,3}>\").replace(\"|fences\",\"\").replace(\"|list\",\"\").replace(\"|html\",\"\").replace(\"|tag\",\"\").getRegex()},qe=/^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,ve=/^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,le=/^( {2,}|\\\\)\\n(?!\\s*$)/,De=/^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,D=/[\\p{P}\\p{S}]/u,X=/[\\s\\p{P}\\p{S}]/u,ue=/[^\\s\\p{P}\\p{S}]/u,He=h(/^((?![*_])punctSpace)/,\"u\").replace(/punctSpace/g,X).getRegex(),pe=/(?!~)[\\p{P}\\p{S}]/u,Ze=/(?!~)[\\s\\p{P}\\p{S}]/u,Ge=/(?:[^\\s\\p{P}\\p{S}]|~)/u,Ne=/\\[[^\\[\\]]*?\\]\\((?:\\\\[\\s\\S]|[^\\\\\\(\\)]|\\((?:\\\\[\\s\\S]|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<(?! )[^<>]*?>/g,ce=/^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/,je=h(ce,\"u\").replace(/punct/g,D).getRegex(),Fe=h(ce,\"u\").replace(/punct/g,pe).getRegex(),he=\"^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)|notPunctSpace(\\\\*+)(?=notPunctSpace)\",Qe=h(he,\"gu\").replace(/notPunctSpace/g,ue).replace(/punctSpace/g,X).replace(/punct/g,D).getRegex(),Ue=h(he,\"gu\").replace(/notPunctSpace/g,Ge).replace(/punctSpace/g,Ze).replace(/punct/g,pe).getRegex(),Ke=h(\"^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)\",\"gu\").replace(/notPunctSpace/g,ue).replace(/punctSpace/g,X).replace(/punct/g,D).getRegex(),We=h(/\\\\(punct)/,\"gu\").replace(/punct/g,D).getRegex(),Xe=h(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace(\"scheme\",/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace(\"email\",/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(),Je=h(K).replace(\"(?:-->|$)\",\"-->\").getRegex(),Ve=h(\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\").replace(\"comment\",Je).replace(\"attribute\",/\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex(),q=/(?:\\[(?:\\\\[\\s\\S]|[^\\[\\]\\\\])*\\]|\\\\[\\s\\S]|`[^`]*`|[^\\[\\]\\\\`])*?/,Ye=h(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/).replace(\"label\",q).replace(\"href\",/<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/).replace(\"title\",/\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex(),de=h(/^!?\\[(label)\\]\\[(ref)\\]/).replace(\"label\",q).replace(\"ref\",U).getRegex(),ke=h(/^!?\\[(ref)\\](?:\\[\\])?/).replace(\"ref\",U).getRegex(),et=h(\"reflink|nolink(?!\\\\()\",\"g\").replace(\"reflink\",de).replace(\"nolink\",ke).getRegex(),J={_backpedal:C,anyPunctuation:We,autolink:Xe,blockSkip:Ne,br:le,code:ve,del:C,emStrongLDelim:je,emStrongRDelimAst:Qe,emStrongRDelimUnd:Ke,escape:qe,link:Ye,nolink:ke,punctuation:He,reflink:de,reflinkSearch:et,tag:Ve,text:De,url:C},tt={...J,link:h(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\",q).getRegex(),reflink:h(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\",q).getRegex()},j={...J,emStrongRDelimAst:Ue,emStrongLDelim:Fe,url:h(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\"i\").replace(\"email\",/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),_backpedal:/(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,del:/^(~~?)(?=[^\\s~])((?:\\\\[\\s\\S]|[^\\\\])*?(?:\\\\[\\s\\S]|[^\\s~\\\\]))\\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/},nt={...j,br:h(le).replace(\"{2,}\",\"*\").getRegex(),text:h(j.text).replace(\"\\\\b_\",\"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g,\"*\").getRegex()},B={normal:W,gfm:Ie,pedantic:Be},M={normal:J,gfm:j,breaks:nt,pedantic:tt};var rt={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\"},ge=a=>rt[a];function w(a,e){if(e){if(m.escapeTest.test(a))return a.replace(m.escapeReplace,ge)}else if(m.escapeTestNoEncode.test(a))return a.replace(m.escapeReplaceNoEncode,ge);return a}function V(a){try{a=encodeURI(a).replace(m.percentDecode,\"%\")}catch{return null}return a}function Y(a,e){let t=a.replace(m.findPipe,(i,s,o)=>{let l=!1,u=s;for(;--u>=0&&o[u]===\"\\\\\";)l=!l;return l?\"|\":\" |\"}),n=t.split(m.splitPipe),r=0;if(n[0].trim()||n.shift(),n.length>0&&!n.at(-1)?.trim()&&n.pop(),e)if(n.length>e)n.splice(e);else for(;n.length<e;)n.push(\"\");for(;r<n.length;r++)n[r]=n[r].trim().replace(m.slashPipe,\"|\");return n}function z(a,e,t){let n=a.length;if(n===0)return\"\";let r=0;for(;r<n;){let i=a.charAt(n-r-1);if(i===e&&!t)r++;else if(i!==e&&t)r++;else break}return a.slice(0,n-r)}function fe(a,e){if(a.indexOf(e[1])===-1)return-1;let t=0;for(let n=0;n<a.length;n++)if(a[n]===\"\\\\\")n++;else if(a[n]===e[0])t++;else if(a[n]===e[1]&&(t--,t<0))return n;return t>0?-2:-1}function me(a,e,t,n,r){let i=e.href,s=e.title||null,o=a[1].replace(r.other.outputLinkReplace,\"$1\");n.state.inLink=!0;let l={type:a[0].charAt(0)===\"!\"?\"image\":\"link\",raw:t,href:i,title:s,text:o,tokens:n.inlineTokens(o)};return n.state.inLink=!1,l}function st(a,e,t){let n=a.match(t.other.indentCodeCompensation);if(n===null)return e;let r=n[1];return e.split(`\n`).map(i=>{let s=i.match(t.other.beginningSpace);if(s===null)return i;let[o]=s;return o.length>=r.length?i.slice(r.length):i}).join(`\n`)}var y=class{options;rules;lexer;constructor(e){this.options=e||O}space(e){let t=this.rules.block.newline.exec(e);if(t&&t[0].length>0)return{type:\"space\",raw:t[0]}}code(e){let t=this.rules.block.code.exec(e);if(t){let n=t[0].replace(this.rules.other.codeRemoveIndent,\"\");return{type:\"code\",raw:t[0],codeBlockStyle:\"indented\",text:this.options.pedantic?n:z(n,`\n`)}}}fences(e){let t=this.rules.block.fences.exec(e);if(t){let n=t[0],r=st(n,t[3]||\"\",this.rules);return{type:\"code\",raw:n,lang:t[2]?t[2].trim().replace(this.rules.inline.anyPunctuation,\"$1\"):t[2],text:r}}}heading(e){let t=this.rules.block.heading.exec(e);if(t){let n=t[2].trim();if(this.rules.other.endingHash.test(n)){let r=z(n,\"#\");(this.options.pedantic||!r||this.rules.other.endingSpaceChar.test(r))&&(n=r.trim())}return{type:\"heading\",raw:t[0],depth:t[1].length,text:n,tokens:this.lexer.inline(n)}}}hr(e){let t=this.rules.block.hr.exec(e);if(t)return{type:\"hr\",raw:z(t[0],`\n`)}}blockquote(e){let t=this.rules.block.blockquote.exec(e);if(t){let n=z(t[0],`\n`).split(`\n`),r=\"\",i=\"\",s=[];for(;n.length>0;){let o=!1,l=[],u;for(u=0;u<n.length;u++)if(this.rules.other.blockquoteStart.test(n[u]))l.push(n[u]),o=!0;else if(!o)l.push(n[u]);else break;n=n.slice(u);let p=l.join(`\n`),c=p.replace(this.rules.other.blockquoteSetextReplace,`\n    $1`).replace(this.rules.other.blockquoteSetextReplace2,\"\");r=r?`${r}\n${p}`:p,i=i?`${i}\n${c}`:c;let f=this.lexer.state.top;if(this.lexer.state.top=!0,this.lexer.blockTokens(c,s,!0),this.lexer.state.top=f,n.length===0)break;let k=s.at(-1);if(k?.type===\"code\")break;if(k?.type===\"blockquote\"){let R=k,g=R.raw+`\n`+n.join(`\n`),T=this.blockquote(g);s[s.length-1]=T,r=r.substring(0,r.length-R.raw.length)+T.raw,i=i.substring(0,i.length-R.text.length)+T.text;break}else if(k?.type===\"list\"){let R=k,g=R.raw+`\n`+n.join(`\n`),T=this.list(g);s[s.length-1]=T,r=r.substring(0,r.length-k.raw.length)+T.raw,i=i.substring(0,i.length-R.raw.length)+T.raw,n=g.substring(s.at(-1).raw.length).split(`\n`);continue}}return{type:\"blockquote\",raw:r,tokens:s,text:i}}}list(e){let t=this.rules.block.list.exec(e);if(t){let n=t[1].trim(),r=n.length>1,i={type:\"list\",raw:\"\",ordered:r,start:r?+n.slice(0,-1):\"\",loose:!1,items:[]};n=r?`\\\\d{1,9}\\\\${n.slice(-1)}`:`\\\\${n}`,this.options.pedantic&&(n=r?n:\"[*+-]\");let s=this.rules.other.listItemRegex(n),o=!1;for(;e;){let u=!1,p=\"\",c=\"\";if(!(t=s.exec(e))||this.rules.block.hr.test(e))break;p=t[0],e=e.substring(p.length);let f=t[2].split(`\n`,1)[0].replace(this.rules.other.listReplaceTabs,H=>\" \".repeat(3*H.length)),k=e.split(`\n`,1)[0],R=!f.trim(),g=0;if(this.options.pedantic?(g=2,c=f.trimStart()):R?g=t[1].length+1:(g=t[2].search(this.rules.other.nonSpaceChar),g=g>4?1:g,c=f.slice(g),g+=t[1].length),R&&this.rules.other.blankLine.test(k)&&(p+=k+`\n`,e=e.substring(k.length+1),u=!0),!u){let H=this.rules.other.nextBulletRegex(g),te=this.rules.other.hrRegex(g),ne=this.rules.other.fencesBeginRegex(g),re=this.rules.other.headingBeginRegex(g),xe=this.rules.other.htmlBeginRegex(g);for(;e;){let Z=e.split(`\n`,1)[0],E;if(k=Z,this.options.pedantic?(k=k.replace(this.rules.other.listReplaceNesting,\"  \"),E=k):E=k.replace(this.rules.other.tabCharGlobal,\"    \"),ne.test(k)||re.test(k)||xe.test(k)||H.test(k)||te.test(k))break;if(E.search(this.rules.other.nonSpaceChar)>=g||!k.trim())c+=`\n`+E.slice(g);else{if(R||f.replace(this.rules.other.tabCharGlobal,\"    \").search(this.rules.other.nonSpaceChar)>=4||ne.test(f)||re.test(f)||te.test(f))break;c+=`\n`+k}!R&&!k.trim()&&(R=!0),p+=Z+`\n`,e=e.substring(Z.length+1),f=E.slice(g)}}i.loose||(o?i.loose=!0:this.rules.other.doubleBlankLine.test(p)&&(o=!0));let T=null,ee;this.options.gfm&&(T=this.rules.other.listIsTask.exec(c),T&&(ee=T[0]!==\"[ ] \",c=c.replace(this.rules.other.listReplaceTask,\"\"))),i.items.push({type:\"list_item\",raw:p,task:!!T,checked:ee,loose:!1,text:c,tokens:[]}),i.raw+=p}let l=i.items.at(-1);if(l)l.raw=l.raw.trimEnd(),l.text=l.text.trimEnd();else return;i.raw=i.raw.trimEnd();for(let u=0;u<i.items.length;u++)if(this.lexer.state.top=!1,i.items[u].tokens=this.lexer.blockTokens(i.items[u].text,[]),!i.loose){let p=i.items[u].tokens.filter(f=>f.type===\"space\"),c=p.length>0&&p.some(f=>this.rules.other.anyLine.test(f.raw));i.loose=c}if(i.loose)for(let u=0;u<i.items.length;u++)i.items[u].loose=!0;return i}}html(e){let t=this.rules.block.html.exec(e);if(t)return{type:\"html\",block:!0,raw:t[0],pre:t[1]===\"pre\"||t[1]===\"script\"||t[1]===\"style\",text:t[0]}}def(e){let t=this.rules.block.def.exec(e);if(t){let n=t[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal,\" \"),r=t[2]?t[2].replace(this.rules.other.hrefBrackets,\"$1\").replace(this.rules.inline.anyPunctuation,\"$1\"):\"\",i=t[3]?t[3].substring(1,t[3].length-1).replace(this.rules.inline.anyPunctuation,\"$1\"):t[3];return{type:\"def\",tag:n,raw:t[0],href:r,title:i}}}table(e){let t=this.rules.block.table.exec(e);if(!t||!this.rules.other.tableDelimiter.test(t[2]))return;let n=Y(t[1]),r=t[2].replace(this.rules.other.tableAlignChars,\"\").split(\"|\"),i=t[3]?.trim()?t[3].replace(this.rules.other.tableRowBlankLine,\"\").split(`\n`):[],s={type:\"table\",raw:t[0],header:[],align:[],rows:[]};if(n.length===r.length){for(let o of r)this.rules.other.tableAlignRight.test(o)?s.align.push(\"right\"):this.rules.other.tableAlignCenter.test(o)?s.align.push(\"center\"):this.rules.other.tableAlignLeft.test(o)?s.align.push(\"left\"):s.align.push(null);for(let o=0;o<n.length;o++)s.header.push({text:n[o],tokens:this.lexer.inline(n[o]),header:!0,align:s.align[o]});for(let o of i)s.rows.push(Y(o,s.header.length).map((l,u)=>({text:l,tokens:this.lexer.inline(l),header:!1,align:s.align[u]})));return s}}lheading(e){let t=this.rules.block.lheading.exec(e);if(t)return{type:\"heading\",raw:t[0],depth:t[2].charAt(0)===\"=\"?1:2,text:t[1],tokens:this.lexer.inline(t[1])}}paragraph(e){let t=this.rules.block.paragraph.exec(e);if(t){let n=t[1].charAt(t[1].length-1)===`\n`?t[1].slice(0,-1):t[1];return{type:\"paragraph\",raw:t[0],text:n,tokens:this.lexer.inline(n)}}}text(e){let t=this.rules.block.text.exec(e);if(t)return{type:\"text\",raw:t[0],text:t[0],tokens:this.lexer.inline(t[0])}}escape(e){let t=this.rules.inline.escape.exec(e);if(t)return{type:\"escape\",raw:t[0],text:t[1]}}tag(e){let t=this.rules.inline.tag.exec(e);if(t)return!this.lexer.state.inLink&&this.rules.other.startATag.test(t[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&this.rules.other.endATag.test(t[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&this.rules.other.startPreScriptTag.test(t[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&this.rules.other.endPreScriptTag.test(t[0])&&(this.lexer.state.inRawBlock=!1),{type:\"html\",raw:t[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,block:!1,text:t[0]}}link(e){let t=this.rules.inline.link.exec(e);if(t){let n=t[2].trim();if(!this.options.pedantic&&this.rules.other.startAngleBracket.test(n)){if(!this.rules.other.endAngleBracket.test(n))return;let s=z(n.slice(0,-1),\"\\\\\");if((n.length-s.length)%2===0)return}else{let s=fe(t[2],\"()\");if(s===-2)return;if(s>-1){let l=(t[0].indexOf(\"!\")===0?5:4)+t[1].length+s;t[2]=t[2].substring(0,s),t[0]=t[0].substring(0,l).trim(),t[3]=\"\"}}let r=t[2],i=\"\";if(this.options.pedantic){let s=this.rules.other.pedanticHrefTitle.exec(r);s&&(r=s[1],i=s[3])}else i=t[3]?t[3].slice(1,-1):\"\";return r=r.trim(),this.rules.other.startAngleBracket.test(r)&&(this.options.pedantic&&!this.rules.other.endAngleBracket.test(n)?r=r.slice(1):r=r.slice(1,-1)),me(t,{href:r&&r.replace(this.rules.inline.anyPunctuation,\"$1\"),title:i&&i.replace(this.rules.inline.anyPunctuation,\"$1\")},t[0],this.lexer,this.rules)}}reflink(e,t){let n;if((n=this.rules.inline.reflink.exec(e))||(n=this.rules.inline.nolink.exec(e))){let r=(n[2]||n[1]).replace(this.rules.other.multipleSpaceGlobal,\" \"),i=t[r.toLowerCase()];if(!i){let s=n[0].charAt(0);return{type:\"text\",raw:s,text:s}}return me(n,i,n[0],this.lexer,this.rules)}}emStrong(e,t,n=\"\"){let r=this.rules.inline.emStrongLDelim.exec(e);if(!r||r[3]&&n.match(this.rules.other.unicodeAlphaNumeric))return;if(!(r[1]||r[2]||\"\")||!n||this.rules.inline.punctuation.exec(n)){let s=[...r[0]].length-1,o,l,u=s,p=0,c=r[0][0]===\"*\"?this.rules.inline.emStrongRDelimAst:this.rules.inline.emStrongRDelimUnd;for(c.lastIndex=0,t=t.slice(-1*e.length+s);(r=c.exec(t))!=null;){if(o=r[1]||r[2]||r[3]||r[4]||r[5]||r[6],!o)continue;if(l=[...o].length,r[3]||r[4]){u+=l;continue}else if((r[5]||r[6])&&s%3&&!((s+l)%3)){p+=l;continue}if(u-=l,u>0)continue;l=Math.min(l,l+u+p);let f=[...r[0]][0].length,k=e.slice(0,s+r.index+f+l);if(Math.min(s,l)%2){let g=k.slice(1,-1);return{type:\"em\",raw:k,text:g,tokens:this.lexer.inlineTokens(g)}}let R=k.slice(2,-2);return{type:\"strong\",raw:k,text:R,tokens:this.lexer.inlineTokens(R)}}}}codespan(e){let t=this.rules.inline.code.exec(e);if(t){let n=t[2].replace(this.rules.other.newLineCharGlobal,\" \"),r=this.rules.other.nonSpaceChar.test(n),i=this.rules.other.startingSpaceChar.test(n)&&this.rules.other.endingSpaceChar.test(n);return r&&i&&(n=n.substring(1,n.length-1)),{type:\"codespan\",raw:t[0],text:n}}}br(e){let t=this.rules.inline.br.exec(e);if(t)return{type:\"br\",raw:t[0]}}del(e){let t=this.rules.inline.del.exec(e);if(t)return{type:\"del\",raw:t[0],text:t[2],tokens:this.lexer.inlineTokens(t[2])}}autolink(e){let t=this.rules.inline.autolink.exec(e);if(t){let n,r;return t[2]===\"@\"?(n=t[1],r=\"mailto:\"+n):(n=t[1],r=n),{type:\"link\",raw:t[0],text:n,href:r,tokens:[{type:\"text\",raw:n,text:n}]}}}url(e){let t;if(t=this.rules.inline.url.exec(e)){let n,r;if(t[2]===\"@\")n=t[0],r=\"mailto:\"+n;else{let i;do i=t[0],t[0]=this.rules.inline._backpedal.exec(t[0])?.[0]??\"\";while(i!==t[0]);n=t[0],t[1]===\"www.\"?r=\"http://\"+t[0]:r=t[0]}return{type:\"link\",raw:t[0],text:n,href:r,tokens:[{type:\"text\",raw:n,text:n}]}}}inlineText(e){let t=this.rules.inline.text.exec(e);if(t){let n=this.lexer.state.inRawBlock;return{type:\"text\",raw:t[0],text:t[0],escaped:n}}}};var x=class a{tokens;options;state;tokenizer;inlineQueue;constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||O,this.options.tokenizer=this.options.tokenizer||new y,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};let t={other:m,block:B.normal,inline:M.normal};this.options.pedantic?(t.block=B.pedantic,t.inline=M.pedantic):this.options.gfm&&(t.block=B.gfm,this.options.breaks?t.inline=M.breaks:t.inline=M.gfm),this.tokenizer.rules=t}static get rules(){return{block:B,inline:M}}static lex(e,t){return new a(t).lex(e)}static lexInline(e,t){return new a(t).inlineTokens(e)}lex(e){e=e.replace(m.carriageReturn,`\n`),this.blockTokens(e,this.tokens);for(let t=0;t<this.inlineQueue.length;t++){let n=this.inlineQueue[t];this.inlineTokens(n.src,n.tokens)}return this.inlineQueue=[],this.tokens}blockTokens(e,t=[],n=!1){for(this.options.pedantic&&(e=e.replace(m.tabCharGlobal,\"    \").replace(m.spaceLine,\"\"));e;){let r;if(this.options.extensions?.block?.some(s=>(r=s.call({lexer:this},e,t))?(e=e.substring(r.raw.length),t.push(r),!0):!1))continue;if(r=this.tokenizer.space(e)){e=e.substring(r.raw.length);let s=t.at(-1);r.raw.length===1&&s!==void 0?s.raw+=`\n`:t.push(r);continue}if(r=this.tokenizer.code(e)){e=e.substring(r.raw.length);let s=t.at(-1);s?.type===\"paragraph\"||s?.type===\"text\"?(s.raw+=(s.raw.endsWith(`\n`)?\"\":`\n`)+r.raw,s.text+=`\n`+r.text,this.inlineQueue.at(-1).src=s.text):t.push(r);continue}if(r=this.tokenizer.fences(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.heading(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.hr(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.blockquote(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.list(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.html(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.def(e)){e=e.substring(r.raw.length);let s=t.at(-1);s?.type===\"paragraph\"||s?.type===\"text\"?(s.raw+=(s.raw.endsWith(`\n`)?\"\":`\n`)+r.raw,s.text+=`\n`+r.raw,this.inlineQueue.at(-1).src=s.text):this.tokens.links[r.tag]||(this.tokens.links[r.tag]={href:r.href,title:r.title},t.push(r));continue}if(r=this.tokenizer.table(e)){e=e.substring(r.raw.length),t.push(r);continue}if(r=this.tokenizer.lheading(e)){e=e.substring(r.raw.length),t.push(r);continue}let i=e;if(this.options.extensions?.startBlock){let s=1/0,o=e.slice(1),l;this.options.extensions.startBlock.forEach(u=>{l=u.call({lexer:this},o),typeof l==\"number\"&&l>=0&&(s=Math.min(s,l))}),s<1/0&&s>=0&&(i=e.substring(0,s+1))}if(this.state.top&&(r=this.tokenizer.paragraph(i))){let s=t.at(-1);n&&s?.type===\"paragraph\"?(s.raw+=(s.raw.endsWith(`\n`)?\"\":`\n`)+r.raw,s.text+=`\n`+r.text,this.inlineQueue.pop(),this.inlineQueue.at(-1).src=s.text):t.push(r),n=i.length!==e.length,e=e.substring(r.raw.length);continue}if(r=this.tokenizer.text(e)){e=e.substring(r.raw.length);let s=t.at(-1);s?.type===\"text\"?(s.raw+=(s.raw.endsWith(`\n`)?\"\":`\n`)+r.raw,s.text+=`\n`+r.text,this.inlineQueue.pop(),this.inlineQueue.at(-1).src=s.text):t.push(r);continue}if(e){let s=\"Infinite loop on byte: \"+e.charCodeAt(0);if(this.options.silent){console.error(s);break}else throw new Error(s)}}return this.state.top=!0,t}inline(e,t=[]){return this.inlineQueue.push({src:e,tokens:t}),t}inlineTokens(e,t=[]){let n=e,r=null;if(this.tokens.links){let o=Object.keys(this.tokens.links);if(o.length>0)for(;(r=this.tokenizer.rules.inline.reflinkSearch.exec(n))!=null;)o.includes(r[0].slice(r[0].lastIndexOf(\"[\")+1,-1))&&(n=n.slice(0,r.index)+\"[\"+\"a\".repeat(r[0].length-2)+\"]\"+n.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;(r=this.tokenizer.rules.inline.anyPunctuation.exec(n))!=null;)n=n.slice(0,r.index)+\"++\"+n.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);for(;(r=this.tokenizer.rules.inline.blockSkip.exec(n))!=null;)n=n.slice(0,r.index)+\"[\"+\"a\".repeat(r[0].length-2)+\"]\"+n.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);n=this.options.hooks?.emStrongMask?.call({lexer:this},n)??n;let i=!1,s=\"\";for(;e;){i||(s=\"\"),i=!1;let o;if(this.options.extensions?.inline?.some(u=>(o=u.call({lexer:this},e,t))?(e=e.substring(o.raw.length),t.push(o),!0):!1))continue;if(o=this.tokenizer.escape(e)){e=e.substring(o.raw.length),t.push(o);continue}if(o=this.tokenizer.tag(e)){e=e.substring(o.raw.length),t.push(o);continue}if(o=this.tokenizer.link(e)){e=e.substring(o.raw.length),t.push(o);continue}if(o=this.tokenizer.reflink(e,this.tokens.links)){e=e.substring(o.raw.length);let u=t.at(-1);o.type===\"text\"&&u?.type===\"text\"?(u.raw+=o.raw,u.text+=o.text):t.push(o);continue}if(o=this.tokenizer.emStrong(e,n,s)){e=e.substring(o.raw.length),t.push(o);continue}if(o=this.tokenizer.codespan(e)){e=e.substring(o.raw.length),t.push(o);continue}if(o=this.tokenizer.br(e)){e=e.substring(o.raw.length),t.push(o);continue}if(o=this.tokenizer.del(e)){e=e.substring(o.raw.length),t.push(o);continue}if(o=this.tokenizer.autolink(e)){e=e.substring(o.raw.length),t.push(o);continue}if(!this.state.inLink&&(o=this.tokenizer.url(e))){e=e.substring(o.raw.length),t.push(o);continue}let l=e;if(this.options.extensions?.startInline){let u=1/0,p=e.slice(1),c;this.options.extensions.startInline.forEach(f=>{c=f.call({lexer:this},p),typeof c==\"number\"&&c>=0&&(u=Math.min(u,c))}),u<1/0&&u>=0&&(l=e.substring(0,u+1))}if(o=this.tokenizer.inlineText(l)){e=e.substring(o.raw.length),o.raw.slice(-1)!==\"_\"&&(s=o.raw.slice(-1)),i=!0;let u=t.at(-1);u?.type===\"text\"?(u.raw+=o.raw,u.text+=o.text):t.push(o);continue}if(e){let u=\"Infinite loop on byte: \"+e.charCodeAt(0);if(this.options.silent){console.error(u);break}else throw new Error(u)}}return t}};var P=class{options;parser;constructor(e){this.options=e||O}space(e){return\"\"}code({text:e,lang:t,escaped:n}){let r=(t||\"\").match(m.notSpaceStart)?.[0],i=e.replace(m.endingNewline,\"\")+`\n`;return r?'<pre><code class=\"language-'+w(r)+'\">'+(n?i:w(i,!0))+`</code></pre>\n`:\"<pre><code>\"+(n?i:w(i,!0))+`</code></pre>\n`}blockquote({tokens:e}){return`<blockquote>\n${this.parser.parse(e)}</blockquote>\n`}html({text:e}){return e}def(e){return\"\"}heading({tokens:e,depth:t}){return`<h${t}>${this.parser.parseInline(e)}</h${t}>\n`}hr(e){return`<hr>\n`}list(e){let t=e.ordered,n=e.start,r=\"\";for(let o=0;o<e.items.length;o++){let l=e.items[o];r+=this.listitem(l)}let i=t?\"ol\":\"ul\",s=t&&n!==1?' start=\"'+n+'\"':\"\";return\"<\"+i+s+`>\n`+r+\"</\"+i+`>\n`}listitem(e){let t=\"\";if(e.task){let n=this.checkbox({checked:!!e.checked});e.loose?e.tokens[0]?.type===\"paragraph\"?(e.tokens[0].text=n+\" \"+e.tokens[0].text,e.tokens[0].tokens&&e.tokens[0].tokens.length>0&&e.tokens[0].tokens[0].type===\"text\"&&(e.tokens[0].tokens[0].text=n+\" \"+w(e.tokens[0].tokens[0].text),e.tokens[0].tokens[0].escaped=!0)):e.tokens.unshift({type:\"text\",raw:n+\" \",text:n+\" \",escaped:!0}):t+=n+\" \"}return t+=this.parser.parse(e.tokens,!!e.loose),`<li>${t}</li>\n`}checkbox({checked:e}){return\"<input \"+(e?'checked=\"\" ':\"\")+'disabled=\"\" type=\"checkbox\">'}paragraph({tokens:e}){return`<p>${this.parser.parseInline(e)}</p>\n`}table(e){let t=\"\",n=\"\";for(let i=0;i<e.header.length;i++)n+=this.tablecell(e.header[i]);t+=this.tablerow({text:n});let r=\"\";for(let i=0;i<e.rows.length;i++){let s=e.rows[i];n=\"\";for(let o=0;o<s.length;o++)n+=this.tablecell(s[o]);r+=this.tablerow({text:n})}return r&&(r=`<tbody>${r}</tbody>`),`<table>\n<thead>\n`+t+`</thead>\n`+r+`</table>\n`}tablerow({text:e}){return`<tr>\n${e}</tr>\n`}tablecell(e){let t=this.parser.parseInline(e.tokens),n=e.header?\"th\":\"td\";return(e.align?`<${n} align=\"${e.align}\">`:`<${n}>`)+t+`</${n}>\n`}strong({tokens:e}){return`<strong>${this.parser.parseInline(e)}</strong>`}em({tokens:e}){return`<em>${this.parser.parseInline(e)}</em>`}codespan({text:e}){return`<code>${w(e,!0)}</code>`}br(e){return\"<br>\"}del({tokens:e}){return`<del>${this.parser.parseInline(e)}</del>`}link({href:e,title:t,tokens:n}){let r=this.parser.parseInline(n),i=V(e);if(i===null)return r;e=i;let s='<a href=\"'+e+'\"';return t&&(s+=' title=\"'+w(t)+'\"'),s+=\">\"+r+\"</a>\",s}image({href:e,title:t,text:n,tokens:r}){r&&(n=this.parser.parseInline(r,this.parser.textRenderer));let i=V(e);if(i===null)return w(n);e=i;let s=`<img src=\"${e}\" alt=\"${n}\"`;return t&&(s+=` title=\"${w(t)}\"`),s+=\">\",s}text(e){return\"tokens\"in e&&e.tokens?this.parser.parseInline(e.tokens):\"escaped\"in e&&e.escaped?e.text:w(e.text)}};var $=class{strong({text:e}){return e}em({text:e}){return e}codespan({text:e}){return e}del({text:e}){return e}html({text:e}){return e}text({text:e}){return e}link({text:e}){return\"\"+e}image({text:e}){return\"\"+e}br(){return\"\"}};var b=class a{options;renderer;textRenderer;constructor(e){this.options=e||O,this.options.renderer=this.options.renderer||new P,this.renderer=this.options.renderer,this.renderer.options=this.options,this.renderer.parser=this,this.textRenderer=new $}static parse(e,t){return new a(t).parse(e)}static parseInline(e,t){return new a(t).parseInline(e)}parse(e,t=!0){let n=\"\";for(let r=0;r<e.length;r++){let i=e[r];if(this.options.extensions?.renderers?.[i.type]){let o=i,l=this.options.extensions.renderers[o.type].call({parser:this},o);if(l!==!1||![\"space\",\"hr\",\"heading\",\"code\",\"table\",\"blockquote\",\"list\",\"html\",\"def\",\"paragraph\",\"text\"].includes(o.type)){n+=l||\"\";continue}}let s=i;switch(s.type){case\"space\":{n+=this.renderer.space(s);continue}case\"hr\":{n+=this.renderer.hr(s);continue}case\"heading\":{n+=this.renderer.heading(s);continue}case\"code\":{n+=this.renderer.code(s);continue}case\"table\":{n+=this.renderer.table(s);continue}case\"blockquote\":{n+=this.renderer.blockquote(s);continue}case\"list\":{n+=this.renderer.list(s);continue}case\"html\":{n+=this.renderer.html(s);continue}case\"def\":{n+=this.renderer.def(s);continue}case\"paragraph\":{n+=this.renderer.paragraph(s);continue}case\"text\":{let o=s,l=this.renderer.text(o);for(;r+1<e.length&&e[r+1].type===\"text\";)o=e[++r],l+=`\n`+this.renderer.text(o);t?n+=this.renderer.paragraph({type:\"paragraph\",raw:l,text:l,tokens:[{type:\"text\",raw:l,text:l,escaped:!0}]}):n+=l;continue}default:{let o='Token with \"'+s.type+'\" type was not found.';if(this.options.silent)return console.error(o),\"\";throw new Error(o)}}}return n}parseInline(e,t=this.renderer){let n=\"\";for(let r=0;r<e.length;r++){let i=e[r];if(this.options.extensions?.renderers?.[i.type]){let o=this.options.extensions.renderers[i.type].call({parser:this},i);if(o!==!1||![\"escape\",\"html\",\"link\",\"image\",\"strong\",\"em\",\"codespan\",\"br\",\"del\",\"text\"].includes(i.type)){n+=o||\"\";continue}}let s=i;switch(s.type){case\"escape\":{n+=t.text(s);break}case\"html\":{n+=t.html(s);break}case\"link\":{n+=t.link(s);break}case\"image\":{n+=t.image(s);break}case\"strong\":{n+=t.strong(s);break}case\"em\":{n+=t.em(s);break}case\"codespan\":{n+=t.codespan(s);break}case\"br\":{n+=t.br(s);break}case\"del\":{n+=t.del(s);break}case\"text\":{n+=t.text(s);break}default:{let o='Token with \"'+s.type+'\" type was not found.';if(this.options.silent)return console.error(o),\"\";throw new Error(o)}}}return n}};var S=class{options;block;constructor(e){this.options=e||O}static passThroughHooks=new Set([\"preprocess\",\"postprocess\",\"processAllTokens\",\"emStrongMask\"]);static passThroughHooksRespectAsync=new Set([\"preprocess\",\"postprocess\",\"processAllTokens\"]);preprocess(e){return e}postprocess(e){return e}processAllTokens(e){return e}emStrongMask(e){return e}provideLexer(){return this.block?x.lex:x.lexInline}provideParser(){return this.block?b.parse:b.parseInline}};var A=class{defaults=_();options=this.setOptions;parse=this.parseMarkdown(!0);parseInline=this.parseMarkdown(!1);Parser=b;Renderer=P;TextRenderer=$;Lexer=x;Tokenizer=y;Hooks=S;constructor(...e){this.use(...e)}walkTokens(e,t){let n=[];for(let r of e)switch(n=n.concat(t.call(this,r)),r.type){case\"table\":{let i=r;for(let s of i.header)n=n.concat(this.walkTokens(s.tokens,t));for(let s of i.rows)for(let o of s)n=n.concat(this.walkTokens(o.tokens,t));break}case\"list\":{let i=r;n=n.concat(this.walkTokens(i.items,t));break}default:{let i=r;this.defaults.extensions?.childTokens?.[i.type]?this.defaults.extensions.childTokens[i.type].forEach(s=>{let o=i[s].flat(1/0);n=n.concat(this.walkTokens(o,t))}):i.tokens&&(n=n.concat(this.walkTokens(i.tokens,t)))}}return n}use(...e){let t=this.defaults.extensions||{renderers:{},childTokens:{}};return e.forEach(n=>{let r={...n};if(r.async=this.defaults.async||r.async||!1,n.extensions&&(n.extensions.forEach(i=>{if(!i.name)throw new Error(\"extension name required\");if(\"renderer\"in i){let s=t.renderers[i.name];s?t.renderers[i.name]=function(...o){let l=i.renderer.apply(this,o);return l===!1&&(l=s.apply(this,o)),l}:t.renderers[i.name]=i.renderer}if(\"tokenizer\"in i){if(!i.level||i.level!==\"block\"&&i.level!==\"inline\")throw new Error(\"extension level must be 'block' or 'inline'\");let s=t[i.level];s?s.unshift(i.tokenizer):t[i.level]=[i.tokenizer],i.start&&(i.level===\"block\"?t.startBlock?t.startBlock.push(i.start):t.startBlock=[i.start]:i.level===\"inline\"&&(t.startInline?t.startInline.push(i.start):t.startInline=[i.start]))}\"childTokens\"in i&&i.childTokens&&(t.childTokens[i.name]=i.childTokens)}),r.extensions=t),n.renderer){let i=this.defaults.renderer||new P(this.defaults);for(let s in n.renderer){if(!(s in i))throw new Error(`renderer '${s}' does not exist`);if([\"options\",\"parser\"].includes(s))continue;let o=s,l=n.renderer[o],u=i[o];i[o]=(...p)=>{let c=l.apply(i,p);return c===!1&&(c=u.apply(i,p)),c||\"\"}}r.renderer=i}if(n.tokenizer){let i=this.defaults.tokenizer||new y(this.defaults);for(let s in n.tokenizer){if(!(s in i))throw new Error(`tokenizer '${s}' does not exist`);if([\"options\",\"rules\",\"lexer\"].includes(s))continue;let o=s,l=n.tokenizer[o],u=i[o];i[o]=(...p)=>{let c=l.apply(i,p);return c===!1&&(c=u.apply(i,p)),c}}r.tokenizer=i}if(n.hooks){let i=this.defaults.hooks||new S;for(let s in n.hooks){if(!(s in i))throw new Error(`hook '${s}' does not exist`);if([\"options\",\"block\"].includes(s))continue;let o=s,l=n.hooks[o],u=i[o];S.passThroughHooks.has(s)?i[o]=p=>{if(this.defaults.async&&S.passThroughHooksRespectAsync.has(s))return Promise.resolve(l.call(i,p)).then(f=>u.call(i,f));let c=l.call(i,p);return u.call(i,c)}:i[o]=(...p)=>{let c=l.apply(i,p);return c===!1&&(c=u.apply(i,p)),c}}r.hooks=i}if(n.walkTokens){let i=this.defaults.walkTokens,s=n.walkTokens;r.walkTokens=function(o){let l=[];return l.push(s.call(this,o)),i&&(l=l.concat(i.call(this,o))),l}}this.defaults={...this.defaults,...r}}),this}setOptions(e){return this.defaults={...this.defaults,...e},this}lexer(e,t){return x.lex(e,t??this.defaults)}parser(e,t){return b.parse(e,t??this.defaults)}parseMarkdown(e){return(n,r)=>{let i={...r},s={...this.defaults,...i},o=this.onError(!!s.silent,!!s.async);if(this.defaults.async===!0&&i.async===!1)return o(new Error(\"marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.\"));if(typeof n>\"u\"||n===null)return o(new Error(\"marked(): input parameter is undefined or null\"));if(typeof n!=\"string\")return o(new Error(\"marked(): input parameter is of type \"+Object.prototype.toString.call(n)+\", string expected\"));s.hooks&&(s.hooks.options=s,s.hooks.block=e);let l=s.hooks?s.hooks.provideLexer():e?x.lex:x.lexInline,u=s.hooks?s.hooks.provideParser():e?b.parse:b.parseInline;if(s.async)return Promise.resolve(s.hooks?s.hooks.preprocess(n):n).then(p=>l(p,s)).then(p=>s.hooks?s.hooks.processAllTokens(p):p).then(p=>s.walkTokens?Promise.all(this.walkTokens(p,s.walkTokens)).then(()=>p):p).then(p=>u(p,s)).then(p=>s.hooks?s.hooks.postprocess(p):p).catch(o);try{s.hooks&&(n=s.hooks.preprocess(n));let p=l(n,s);s.hooks&&(p=s.hooks.processAllTokens(p)),s.walkTokens&&this.walkTokens(p,s.walkTokens);let c=u(p,s);return s.hooks&&(c=s.hooks.postprocess(c)),c}catch(p){return o(p)}}}onError(e,t){return n=>{if(n.message+=`\nPlease report this to https://github.com/markedjs/marked.`,e){let r=\"<p>An error occurred:</p><pre>\"+w(n.message+\"\",!0)+\"</pre>\";return t?Promise.resolve(r):r}if(t)return Promise.reject(n);throw n}}};var L=new A;function d(a,e){return L.parse(a,e)}d.options=d.setOptions=function(a){return L.setOptions(a),d.defaults=L.defaults,N(d.defaults),d};d.getDefaults=_;d.defaults=O;d.use=function(...a){return L.use(...a),d.defaults=L.defaults,N(d.defaults),d};d.walkTokens=function(a,e){return L.walkTokens(a,e)};d.parseInline=L.parseInline;d.Parser=b;d.parser=b.parse;d.Renderer=P;d.TextRenderer=$;d.Lexer=x;d.lexer=x.lex;d.Tokenizer=y;d.Hooks=S;d.parse=d;var it=d.options,ot=d.setOptions,at=d.use,lt=d.walkTokens,ut=d.parseInline,pt=d,ct=b.parse,ht=x.lex;\n\nif(__exports != exports)module.exports = exports;return module.exports}));\n//# sourceMappingURL=marked.umd.js.map\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults,\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MaybePromise } from './Instance.ts';\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.\n */\nexport function marked(src: string, options: MarkedOptions & { async: false }): string;\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\nexport function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;\nexport function marked(src: string, opt?: MarkedOptions | null): string | Promise<string> {\n  return markedInstance.parse(src, opt);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './Tokens.ts';\n","import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults<ParserOutput = string, RendererOutput = string>(): MarkedOptions<ParserOutput, RendererOutput> {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null,\n  };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport let _defaults: MarkedOptions<any, any> = _getDefaults();\n\nexport function changeDefaults<ParserOutput = string, RendererOutput = string>(newDefaults: MarkedOptions<ParserOutput, RendererOutput>) {\n  _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null } as unknown as RegExp;\n\nfunction edit(regex: string | RegExp, opt = '') {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    },\n  };\n  return obj;\n}\n\nexport const other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull: string) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n\n/**\n * Block-Level Grammar\n */\n\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\[\\s\\S]|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n  .replace('label', _blockLabel)\n  .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n  .getRegex();\n\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n  .replace(/bull/g, bullet)\n  .getRegex();\n\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n  + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit(\n  '^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i')\n  .replace('comment', _comment)\n  .replace('tag', _tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst paragraph = edit(_paragraph)\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n  .replace('paragraph', paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText,\n};\n\ntype BlockKeys = keyof typeof blockNormal;\n\n/**\n * GFM Block Grammar\n */\n\nconst gfmTable = edit(\n  '^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockGfm: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex(),\n};\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nconst blockPedantic: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', _comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', lheading)\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .replace('|tag', '')\n    .getRegex(),\n};\n\n/**\n * Inline-Level Grammar\n */\n\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n  .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^\\[\\]]*?\\]\\((?:\\\\[\\s\\S]|[^\\\\\\(\\)]|\\((?:\\\\[\\s\\S]|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<(?! )[^<>]*?>/g;\n\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\nconst emStrongRDelimAstCore =\n  '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n  .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit(\n  '^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n  .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n  .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n  .getRegex();\n\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit(\n  '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment)\n  .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst _inlineLabel = /(?:\\[(?:\\\\[\\s\\S]|[^\\[\\]\\\\])*\\]|\\\\[\\s\\S]|`[^`]*`|[^\\[\\]\\\\`])*?/;\n\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n  .replace('label', _inlineLabel)\n  .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n  .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n  .getRegex();\n\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n  .replace('label', _inlineLabel)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n  .replace('reflink', reflink)\n  .replace('nolink', nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\nconst inlineNormal = {\n  _backpedal: noopTest, // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest,\n};\n\ntype InlineKeys = keyof typeof inlineNormal;\n\n/**\n * Pedantic Inline Grammar\n */\n\nconst inlinePedantic: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n};\n\n/**\n * GFM Inline Grammar\n */\n\nconst inlineGfm: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n    .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\[\\s\\S]|[^\\\\])*?(?:\\\\[\\s\\S]|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\nconst inlineBreaks: Record<InlineKeys, RegExp> = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex(),\n};\n\n/**\n * exports\n */\n\nexport const block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic,\n};\n\nexport const inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic,\n};\n\nexport interface Rules {\n  other: typeof other\n  block: Record<BlockKeys, RegExp>\n  inline: Record<InlineKeys, RegExp>\n}\n","import { other } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeReplacements: { [index: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(other.unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nexport function cleanUrl(href: string) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch {\n    return null;\n  }\n  return href;\n}\n\nexport function splitCells(tableRow: string, count?: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n\n  return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  findClosingBracket,\n} from './helpers.ts';\nimport type { Rules } from './rules.ts';\nimport type { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens, Token } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer, rules: Rules): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n\n  lexer.state.inLink = true;\n  const token: Tokens.Link | Tokens.Image = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer.inlineTokens(text),\n  };\n  lexer.state.inLink = false;\n  return token;\n}\n\nfunction indentCodeCompensation(raw: string, text: string, rules: Rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  rules!: Rules; // set by the lexer\n  lexer!: _Lexer<ParserOutput, RendererOutput>; // set by the lexer\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0],\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text,\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text,\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: rtrim(cap[0], '\\n'),\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], '\\n').split('\\n');\n      let raw = '';\n      let text = '';\n      const tokens: Token[] = [];\n\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          // get lines up to a continuation\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n\n        const currentRaw = currentLines.join('\\n');\n        const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n          .replace(this.rules.other.blockquoteSetextReplace2, '');\n        raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\\n${currentText}` : currentText;\n\n        // parse blockquote lines as top level tokens\n        // merge paragraphs if this is a continuation\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n\n        // if there is no continuation then we are done\n        if (lines.length === 0) {\n          break;\n        }\n\n        const lastToken = tokens.at(-1);\n\n        if (lastToken?.type === 'code') {\n          // blockquote continuation cannot be preceded by a code block\n          break;\n        } else if (lastToken?.type === 'blockquote') {\n          // include continuation in nested blockquote\n          const oldToken = lastToken as Tokens.Blockquote;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.blockquote(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === 'list') {\n          // include continuation in nested list\n          const oldToken = lastToken as Tokens.List;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.list(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1)!.raw.length).split('\\n');\n          continue;\n        }\n      }\n\n      return {\n        type: 'blockquote',\n        raw,\n        tokens,\n        text,\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [],\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        let raw = '';\n        let itemContents = '';\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t: string) => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let blankLine = !line.trim();\n\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of html block\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask: RegExpExecArray | null = null;\n        let ischecked: boolean | undefined;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: [],\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      const lastItem = list.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        // not a list since there were no items\n        return;\n      }\n      list.raw = list.raw.trimEnd();\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0],\n      };\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title,\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n\n    const item: Tokens.Table = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: [],\n    };\n\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push('right');\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push('center');\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i],\n      });\n    }\n\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i],\n        };\n      }));\n    }\n\n    return item;\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1]),\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0]),\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: cap[1],\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0],\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex === -2) {\n          // more open parens than closed\n          return;\n        }\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = this.rules.other.pedanticHrefTitle.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text,\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text),\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text),\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text,\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0],\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2]),\n      };\n    }\n  }\n\n  autolink(src: string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[1];\n        href = 'mailto:' + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  url(src: string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[0];\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  inlineText(src: string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        escaped,\n      };\n    }\n  }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\nimport type { Token, TokensList, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Block Lexer\n */\nexport class _Lexer<ParserOutput = string, RendererOutput = string> {\n  tokens: TokensList;\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer<ParserOutput, RendererOutput>;\n  private inlineQueue: { src: string, tokens: Token[] }[];\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    // TokenList cannot be created in one go\n    this.tokens = [] as unknown as TokensList;\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer<ParserOutput, RendererOutput>();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    };\n\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal,\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex<ParserOutput = string, RendererOutput = string>(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const lexer = new _Lexer<ParserOutput, RendererOutput>(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline<ParserOutput = string, RendererOutput = string>(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const lexer = new _Lexer<ParserOutput, RendererOutput>(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src.replace(other.carriageReturn, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];\n  blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;\n  blockTokens(src: string, tokens: Token[] = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n    }\n\n    while (src) {\n      let token: Tokens.Generic | undefined;\n\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== undefined) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          lastToken.raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          };\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match: RegExpExecArray | null = null;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index)\n              + '[' + 'a'.repeat(match[0].length - 2) + ']'\n              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out blocks from extensions\n    maskedSrc = this.options.hooks?.emStrongMask?.call({ lexer: this }, maskedSrc) ?? maskedSrc;\n\n    let keepPrevChar = false;\n    let prevChar = '';\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      let token: Tokens.Generic | undefined;\n\n      // extensions\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === 'text' && lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape,\n} from './helpers.ts';\nimport { other } from './rules.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Tokens } from './Tokens.ts';\nimport type { _Parser } from './Parser.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  parser!: _Parser<ParserOutput, RendererOutput>; // set by the parser\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  space(token: Tokens.Space): RendererOutput {\n    return '' as RendererOutput;\n  }\n\n  code({ text, lang, escaped }: Tokens.Code): RendererOutput {\n    const langString = (lang || '').match(other.notSpaceStart)?.[0];\n\n    const code = text.replace(other.endingNewline, '') + '\\n';\n\n    if (!langString) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n' as RendererOutput;\n    }\n\n    return '<pre><code class=\"language-'\n      + escape(langString)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n' as RendererOutput;\n  }\n\n  blockquote({ tokens }: Tokens.Blockquote): RendererOutput {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\\n${body}</blockquote>\\n` as RendererOutput;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  def(token: Tokens.Def): RendererOutput {\n    return '' as RendererOutput;\n  }\n\n  heading({ tokens, depth }: Tokens.Heading): RendererOutput {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n` as RendererOutput;\n  }\n\n  hr(token: Tokens.Hr): RendererOutput {\n    return '<hr>\\n' as RendererOutput;\n  }\n\n  list(token: Tokens.List): RendererOutput {\n    const ordered = token.ordered;\n    const start = token.start;\n\n    let body = '';\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n\n    const type = ordered ? 'ol' : 'ul';\n    const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n' as RendererOutput;\n  }\n\n  listitem(item: Tokens.ListItem): RendererOutput {\n    let itemBody = '';\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === 'paragraph') {\n          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: 'text',\n            raw: checkbox + ' ',\n            text: checkbox + ' ',\n            escaped: true,\n          });\n        }\n      } else {\n        itemBody += checkbox + ' ';\n      }\n    }\n\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n\n    return `<li>${itemBody}</li>\\n` as RendererOutput;\n  }\n\n  checkbox({ checked }: Tokens.Checkbox): RendererOutput {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\">' as RendererOutput;\n  }\n\n  paragraph({ tokens }: Tokens.Paragraph): RendererOutput {\n    return `<p>${this.parser.parseInline(tokens)}</p>\\n` as RendererOutput;\n  }\n\n  table(token: Tokens.Table): RendererOutput {\n    let header = '';\n\n    // header\n    let cell = '';\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell as ParserOutput });\n\n    let body = '';\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n\n      cell = '';\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n\n      body += this.tablerow({ text: cell as ParserOutput });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n' as RendererOutput;\n  }\n\n  tablerow({ text }: Tokens.TableRow<ParserOutput>): RendererOutput {\n    return `<tr>\\n${text}</tr>\\n` as RendererOutput;\n  }\n\n  tablecell(token: Tokens.TableCell): RendererOutput {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? 'th' : 'td';\n    const tag = token.align\n      ? `<${type} align=\"${token.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n` as RendererOutput;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong({ tokens }: Tokens.Strong): RendererOutput {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>` as RendererOutput;\n  }\n\n  em({ tokens }: Tokens.Em): RendererOutput {\n    return `<em>${this.parser.parseInline(tokens)}</em>` as RendererOutput;\n  }\n\n  codespan({ text }: Tokens.Codespan): RendererOutput {\n    return `<code>${escape(text, true)}</code>` as RendererOutput;\n  }\n\n  br(token: Tokens.Br): RendererOutput {\n    return '<br>' as RendererOutput;\n  }\n\n  del({ tokens }: Tokens.Del): RendererOutput {\n    return `<del>${this.parser.parseInline(tokens)}</del>` as RendererOutput;\n  }\n\n  link({ href, title, tokens }: Tokens.Link): RendererOutput {\n    const text = this.parser.parseInline(tokens) as string;\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text as RendererOutput;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + (escape(title)) + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out as RendererOutput;\n  }\n\n  image({ href, title, text, tokens }: Tokens.Image): RendererOutput {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer) as string;\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape(text) as RendererOutput;\n    }\n    href = cleanHref;\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape(title)}\"`;\n    }\n    out += '>';\n    return out as RendererOutput;\n  }\n\n  text(token: Tokens.Text | Tokens.Escape): RendererOutput {\n    return 'tokens' in token && token.tokens\n      ? this.parser.parseInline(token.tokens) as unknown as RendererOutput\n      : ('escaped' in token && token.escaped ? token.text as RendererOutput : escape(token.text) as RendererOutput);\n  }\n}\n","import type { Tokens } from './Tokens.ts';\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer<RendererOutput = string> {\n  // no need for block level renderers\n  strong({ text }: Tokens.Strong): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  em({ text }: Tokens.Em): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  codespan({ text }: Tokens.Codespan): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  del({ text }: Tokens.Del): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  link({ text }: Tokens.Link): RendererOutput {\n    return '' + text as RendererOutput;\n  }\n\n  image({ text }: Tokens.Image): RendererOutput {\n    return '' + text as RendererOutput;\n  }\n\n  br(): RendererOutput {\n    return '' as RendererOutput;\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport type { MarkedToken, Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  renderer: _Renderer<ParserOutput, RendererOutput>;\n  textRenderer: _TextRenderer<RendererOutput>;\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer<ParserOutput, RendererOutput>();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer<RendererOutput>();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse<ParserOutput = string, RendererOutput = string>(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const parser = new _Parser<ParserOutput, RendererOutput>(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline<ParserOutput = string, RendererOutput = string>(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const parser = new _Parser<ParserOutput, RendererOutput>(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): ParserOutput {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken as Tokens.Generic;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'def', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'space': {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case 'table': {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case 'blockquote': {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case 'list': {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case 'def': {\n          out += this.renderer.def(token);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case 'text': {\n          let textToken = token;\n          let body = this.renderer.text(textToken) as string;\n          while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n            textToken = tokens[++i] as Tokens.Text;\n            body += ('\\n' + this.renderer.text(textToken));\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: 'paragraph',\n              raw: body,\n              text: body,\n              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '' as ParserOutput;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out as ParserOutput;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer: _Renderer<ParserOutput, RendererOutput> | _TextRenderer<RendererOutput> = this.renderer): ParserOutput {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(token);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(token);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token);\n          break;\n        }\n        case 'br': {\n          out += renderer.br(token);\n          break;\n        }\n        case 'del': {\n          out += renderer.del(token);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '' as ParserOutput;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out as ParserOutput;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport class _Hooks<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  block?: boolean;\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n    'emStrongMask',\n  ]);\n\n  static passThroughHooksRespectAsync = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: ParserOutput) {\n    return html;\n  }\n\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens: Token[] | TokensList) {\n    return tokens;\n  }\n\n  /**\n   * Mask contents that should not be interpreted as em/strong delimiters\n   */\n  emStrongMask(src: string) {\n    return src;\n  }\n\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse<ParserOutput, RendererOutput> : _Parser.parseInline<ParserOutput, RendererOutput>;\n  }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, Tokens, TokensList } from './Tokens.ts';\n\nexport type MaybePromise = void | Promise<void>;\n\ntype UnknownFunction = (...args: unknown[]) => unknown;\ntype GenericRendererFunction = (...args: unknown[]) => string | false;\n\nexport class Marked<ParserOutput = string, RendererOutput = string> {\n  defaults = _getDefaults<ParserOutput, RendererOutput>();\n  options = this.setOptions;\n\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n\n  Parser = _Parser<ParserOutput, RendererOutput>;\n  Renderer = _Renderer<ParserOutput, RendererOutput>;\n  TextRenderer = _TextRenderer<RendererOutput>;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer<ParserOutput, RendererOutput>;\n  Hooks = _Hooks<ParserOutput, RendererOutput>;\n\n  constructor(...args: MarkedExtension<ParserOutput, RendererOutput>[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n    let values: MaybePromise[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          const listToken = token as Tokens.List;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token as Tokens.Generic;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens = genericToken[childTokens].flat(Infinity) as Token[] | TokensList;\n              values = values.concat(this.walkTokens(tokens, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension<ParserOutput, RendererOutput>[]) {\n    const extensions: MarkedOptions<ParserOutput, RendererOutput>['extensions'] = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions<ParserOutput, RendererOutput>;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer<ParserOutput, RendererOutput>(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (['options', 'parser'].includes(prop)) {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop as Exclude<keyof _Renderer<ParserOutput, RendererOutput>, 'options' | 'parser'>;\n          const rendererFunc = pack.renderer[rendererProp] as GenericRendererFunction;\n          const prevRenderer = renderer[rendererProp] as GenericRendererFunction;\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args: unknown[]) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return (ret || '') as RendererOutput;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer<ParserOutput, RendererOutput>(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop as Exclude<keyof _Tokenizer<ParserOutput, RendererOutput>, 'options' | 'rules' | 'lexer'>;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp] as UnknownFunction;\n          const prevTokenizer = tokenizer[tokenizerProp] as UnknownFunction;\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args: unknown[]) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks<ParserOutput, RendererOutput>();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (['options', 'block'].includes(prop)) {\n            // ignore options and block properties\n            continue;\n          }\n          const hooksProp = prop as Exclude<keyof _Hooks<ParserOutput, RendererOutput>, 'options' | 'block'>;\n          const hooksFunc = pack.hooks[hooksProp] as UnknownFunction;\n          const prevHook = hooks[hooksProp] as UnknownFunction;\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (arg: unknown) => {\n              if (this.defaults.async && _Hooks.passThroughHooksRespectAsync.has(prop)) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args: unknown[]) => {\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: MaybePromise[] = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  lexer(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n\n  parser(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    return _Parser.parse<ParserOutput, RendererOutput>(tokens, options ?? this.defaults);\n  }\n\n  private parseMarkdown(blockType: boolean) {\n    type overloadedParse = {\n      (src: string, options: MarkedOptions<ParserOutput, RendererOutput> & { async: true }): Promise<ParserOutput>;\n      (src: string, options: MarkedOptions<ParserOutput, RendererOutput> & { async: false }): ParserOutput;\n      (src: string, options?: MarkedOptions<ParserOutput, RendererOutput> | null): ParserOutput | Promise<ParserOutput>;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parse: overloadedParse = (src: string, options?: MarkedOptions<ParserOutput, RendererOutput> | null): any => {\n      const origOpt = { ...options };\n      const opt = { ...this.defaults, ...origOpt };\n\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n\n      // throw error if an extension set async to true but parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n      }\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n\n      const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n      const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src) as string;\n        }\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch(e) {\n        return throwError(e as Error);\n      }\n    };\n\n    return parse;\n  }\n\n  private onError(silent: boolean, async: boolean) {\n    return (e: Error): string | Promise<string> => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\n"],"names":["marked_exports","__export","_Hooks","_Lexer","Marked","_Parser","_Renderer","_TextRenderer","_Tokenizer","_defaults","_getDefaults","lexer","marked","options","parse","parseInline","parser","setOptions","use","walkTokens","__toCommonJS","changeDefaults","newDefaults","noopTest","edit","regex","opt","source","obj","name","val","valSource","other","bull","indent","newline","blockCode","fences","hr","heading","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","blockText","_blockLabel","def","list","_tag","_comment","html","paragraph","blockquote","blockNormal","gfmTable","blockGfm","blockPedantic","escape","inlineCode","br","inlineText","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","_punctuationOrSpaceGfmStrongEm","_notPunctuationOrSpaceGfmStrongEm","blockSkip","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAstCore","emStrongRDelimAst","emStrongRDelimAstGfm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","link","reflink","nolink","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","block","inline","escapeReplacements","getEscapeReplacement","ch","encode","cleanUrl","href","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","i","rtrim","c","invert","l","suffLen","currChar","findClosingBracket","b","level","outputLink","cap","raw","rules","title","text","token","indentCodeCompensation","matchIndentToCode","indentToCode","node","matchIndentInNode","indentInNode","src","trimmed","lines","tokens","inBlockquote","currentLines","currentRaw","currentText","top","lastToken","oldToken","newText","newToken","isordered","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","nextLine","blankLine","nextBulletRegex","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","rawLine","nextLineWithoutTabs","istask","ischecked","lastItem","spacers","hasMultipleLineBreaks","headers","aligns","rows","item","align","cell","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastCharLength","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","__Lexer","next","lastParagraphClipped","extTokenizer","cutSrc","startIndex","tempSrc","tempStart","getStartIndex","errMsg","keepPrevChar","lang","langString","code","depth","ordered","start","body","j","type","startAttr","itemBody","checkbox","checked","header","k","content","cleanHref","out","__Parser","anyToken","genericToken","ret","textToken","renderer","markdown","args","callback","values","tableToken","listToken","childTokens","extensions","pack","opts","ext","prevRenderer","extLevel","prop","rendererProp","rendererFunc","tokenizer","tokenizerProp","tokenizerFunc","prevTokenizer","hooks","hooksProp","hooksFunc","prevHook","arg","packWalktokens","blockType","origOpt","throwError","e","silent","async","msg","markedInstance"],"version":3,"file":"index.js.map"}